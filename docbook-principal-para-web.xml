<?xml version="1.0" encoding="utf-8"?>
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="es">
<info>
  <title>Cómo montar un servidor doméstico con OpenBSD</title>
  <author>
    <personname>
      <firstname>Joan</firstname> <surname>Català Piñón</surname>
    </personname>
  </author>
</info>

  <bookinfo>

        <legalnotice>
            <para>Copyright Creative Commons 2012 Joan Català Piñón &lt;joan@riseup.net&gt;.</para>
            <para>Se permite la redistribución y uso del código (SGML DocBook) y los formularios compilados" (SGML, HTML, PDF) para cualquier finalidad. Se permite cualquier explotación de la obra, incluyendo una finalidad comercial, así como la creación de obras derivadas, la distribución de las cuales también está permitida sin ninguna restricción.</para>
	<para><figure id="licencia">
	<title>Licencia Reconocimiento (by) CC</title>
	<graphic fileref="imagenes/cc.jpg"></graphic>
	</figure> </para>

        </legalnotice>

    <copyright><year>2012</year><holder>Joan Català Piñón</holder></copyright>

    </bookinfo>


<chapter xml:id="introduccion">
  <title>Introducción</title>
    <para>Si te interesa montarte tu propio servidor en casa para servirte de repositorio de música o películas, o para tener un control de versiones en tus programas y proyectos web, o para ser un servidor FTP donde almacenar copias de seguridad de datos importantes guardándolos desde cualquier parte del planeta, o si deseas poder leer el correo desde cualquier sitio y de forma segura, o si quieres montar un servidor web para tener la web de la asociación de perros dálmata de tu barrio, quizás este manual sea un buen punto de partida porque en él explico cómo montar un servidor doméstico con el sistema operativo libre OpenBSD. </para>

<para>En realidad, da igual si lo montas con OpenBSD o con cualquier otro sistema operativo, ya que los conceptos e ideas que vengo a presentar en el presente documento se pueden implementar y adaptar con otros sistemas.</para>

  <section>
    <title>Objetivo de este manual</title>

  <para>Este manual va dirigido a todas aquellas personas que pretendan crear un servidor doméstico. En mi casa tengo una máquina con el sistema operativo OpenBSD llamada <emphasis>nuvolet</emphasis> que me brinda muchos servicios 24x7 y también la uso como plataforma donde guardar copias de respaldo que lanzo con Rsync. A través de estas páginas iré contando mi experiencia y las configuraciones que he realizado para el servidor de mi casa: nuvolet.strangled.net</para>

    <para>Es posible que de vez en cuando vaya actualizando este manual a medida que añada o implemente nuevas funcionalidades y servicios al servidor de mi casa. Así pues, al mismo tiempo que comparto conocimiento e ideas, este manual me sirve para guardarme anotaciones de las configuraciones que realizo en mi servidor.</para>
  </section>

</chapter>

<chapter xml:id="manosalaobra">
  <title>Manos a la obra</title>
  <para>Comencemos a planificar un poco lo que pretendemos hacer conociendo los pros y los contras.</para>

  <section>
    <title>Comenzando, ¿qué es OpenBSD?</title>

    <para>OpenBSD es un sistema operativo libre tipo Unix, multiplataforma, basado en 4.4 BSD, Es un descendiente de NetBSD con un foco especial en la seguridad y la criptografia.</para>

    <para>Este sistema operativo se concentra en la portabilidad, cumplimiento denormas y regulaciones, corrección, seguridad proactiva y criptografía integrada. OpenBSD incluye emulación de binarios para la mayoría de los programas de los sistemas Solaris, FreeBSD, Linux, BSD/OS sunOs y Hp-UX</para>

    <para>Se creó como una variante de la famosa NetBSD debido, según leo en la wikipedia, a diferencias filosóficas entre Theo de Raadt y el resto del equipo de NetBSD. Dejando aparte el hecho de que la seguridad sea la principal razón para que OpenBSD exista, el proyecto también tiene otras metas. Siendo un descendiente de NetBSD, es un sistema operativo muy portable, de hecho funciona en 17 plataformas distintas de hardware. Así que sin duda funcionará en tu netbook, en tu antiguo servidor o en cualquier máquina virtual que montes con Vmware o VirtualBox.</para>

    <para>La filosofía de OpenBSD es: <quote>Free, Functional and Secure</quote> (Libre, Funcional y Seguro). Libre, porque su licencia mantiene el espíritu original del copyright libre original de Berkeley Unix, funcional porque siempre se publica una versión que sea absolutamente estable lista para instalar en producción y segura porque tiene una extrema revisión y supervisión del código.</para>

    <para>A día de hoy, cuando escribo este documento, la versión actual de OpenBSD es la 5.1, que fue publicada el pasado 1 de mayo de 2012. Debes saber que desde sus inicios, OpenBSD publica una versión cada 6 meses, por lo tanto la nueva versión estará lista para hacerse pública en noviembre de 2012.</para>

    <para>La web oficial de OpenBSD es <ulink>http://www.openbsd.org</ulink> y la página de OpenBSD en la Wikipedia está en <ulink>http://es.wikipedia.org/wiki/OpenBSD</ulink>
    </para>

  </section>

  <section>
    <title>¿Por qué montar un servidor con OpenBSD ?</title>

   <para>Esta es sólo una cuestión personal. Por supuesto, también puedes montar un servidor con alguna distribución de GNU/Linux o puedes instalar un XAMPP sobre Windows o Mac OS X y tener tu servidor MySQL + Apache + PHP funcionando muy fácilmente, hay muchas opciones en la actualidad, de eso no hay dudas.</para>

    <para>Lo que pasa es que yo adoro la seguridad, la estabilidad y la libertad, y eso lo obtengo fácilmente con OpenBSD.</para>

    <para>No pretendo crear ninguna discusión ya que lo que voy a decir es únicamente mi opinión personal basada en mi experiencia. Verás, empecé a programar pascal y Object Pascal con Delphi en Windows 3.11, luego trabajé muchos años con Windows 95 y los que vinieron. NT me gustaba mucho. Millenium fue un fiasco total. Años más tarde, me compré un powerbook con Mac OS X y disfruté mucho tiempo con él y con otro macbook que compré hace cinco años, y llevo más de 10 años con GNU/Linux como sistema de escritorio (empecé con Slackware y Suse, luego Red hat un tiempo, luego Debian y desde hace 3 años con Ubuntu), sin embargo nada es perfecto. A mi lo que no me gusta del Mac OS X, a parte de que es privativo, es que cada versión que sacan es más restrictiva que la anterior y te cuelan muchas aplicaciones que ni uso y ni estoy interesado en usarlas. Lo que no me gusta de Windows, a parte de que es privativo, es que cada versión que sacan lo cambian todo y lo renombran todo, y no sé como hacer las cosas que antes ya sabía. Ahora acaban de sacar el Windows 8 y lo instalé en un portátil para probarlo y, en serio, es espantoso. Y ya para acabar, una cosa que no me gusta mucho de las distros GNU/Linux es que cada distribución hace las cosas de una manera, mantiene distintos repositorios y algunas veces sistemas de paquetes. E incluso ahora, en la última Ubuntu 12.10, hay un aplicativo que permite buscar y comprar en Amazon. Me parece bastante feo esto. Sería como si ahora compras Debian GNU/Linux y ves en el escritorio unos iconos de el Corte Inglés y de Mercadona. Sería ... mmm... ¿cómo se dice...?... mmmm... ¿spam? </para>

   <para>En cambio, desde que probé OpenBSD allá por el año 2003 cuando vivía en Barcelona, veo que  todo está donde tiene que estar, todo se administra con la filosofía Unix y todo funciona bien. Además está todo muy bien documentado. Me gusta como servidor seguro.</para>
 
    <para>Dicho esto, debo decir que usar GNU/Linux o algún BSD (NetBSD, OpenBSD, FreeBSD u otros) es una elección personal. Para mi no hay buenos ni malos, simplemente algunos nos convencen más y otros menos.</para>
  </section>

   <section>
   <title>Inconvenientes de montar un servidor doméstico</title>

   <para>Pues sí, el hecho de montar un servidor doméstico en tu casa te generará posiblemente algunos inconvenientes, y muchos dolores de cabeza. Estás avisado. A continuación te dejo una lista de los inconvenientes que yo puedo ver si te decides por montarte un servidor propio en tu casa para darte algunos servicios 24x7:</para>

   <para>
      <itemizedlist>
	<listitem>
	Poco ancho de banda de subida, si lo comparamos con una gran empresa de Hosting.
	</listitem>
	<listitem>
	Es posible que algunas veces vaya lento (sobre todo java o acceso a bases de datos grandes).
	</listitem>
	<listitem>
	Poca capacidad de respuesta ante picos inesperados de tráfico.
	</listitem>
	<listitem>
	Tendremos menos disponibilidad del ancho de banda de casa, por ejemplo, para usar P2P.
	</listitem>
	<listitem>
	No es recomendable tener un ordenador 24x7 en casa ya que el cable puede derretirse o sobrecalentarse generando un cortocircuito o causar un incendio.
	</listitem>
	<listitem>
	Preocupación psicológica durante todo el día de que el servidor esté dando un servicio correcto sin fallos.
	</listitem>
	<listitem>
	Si se va la luz de casa nos quedamos en bragas.
	</listitem>
	<listitem>
	El disco duro tiende a petar al cabo de un tiempo. Comprar uno nuevo cuesta sobre los 70 euros.
	</listitem>
	<listitem>
	Si hay cualquier otra avería del hardware del equipo, debemos actuar rápido ya que todos los servicios estarán parados.
	</listitem>
	<listitem>
	Es necesario invertir tiempo en la administración del servidor.
	</listitem>
      </itemizedlist>
   </para>

</section>

    <section>
    <title>Beneficios de montar un servidor doméstico</title>

   <para>Aquí también dejo los beneficios que obtengo al montar mi propio servidor.</para>

  <itemizedlist>
	<listitem>
	Aprender.
	</listitem>
	<listitem>
	Mejorar.
	</listitem>
	<listitem>
	Compartir lo aprendido con la Comunidad.
	</listitem>
       </itemizedlist>

    <para>Hay un proverbio famoso que me gusta mucho del filósofo chino Confucio (551 a.C. - 479 a.C.) que dice así: <quote>Oigo y olvido. Veo y aprendo. Hago y entiendo.</quote></para>

</section>

</chapter>

<chapter xml:id="instalacion">
  <title>Instalación y puesta en marcha</title>
   <para>En este apartado voy a explicar, a la velocidad de la luz, cómo puedes descargar la última versión de OpenBSD y poner en funcionamiento tu servidor.</para>

    <section>
    <title>Obtención e instalación</title>

  <para>Aquí no voy a explicar paso a paso cómo es la instalación de OpenBSD 5.1., tienes una infinidad de manuales y videotutoriales en la red. Lo único que quiero que sepas es que debes descargar o comprar un CD de OpenBSD o descargarlo libremente desde alguno de los mirrors que verás en <ulink>http://www.openbsd.org/ftp.html</ulink>. </para>

    <para>Descarga install51.iso y quema algún CD que tengas por casa, y manos a la obra... ¡a instalar!</para>

<figure>
<title>Web oficial de OpenBSD, http://openbsd.org</title>
<graphic fileref="imagenes/web-openbsd."></graphic>
</figure> 

    <para>Una instalación de OpenBSD, al contrario de lo que puedas imaginar, es una tarea que acaba en 10 minutos. Lo que pasa es que posteriormente vas a tener que instalar Postfix - por ejemplo - y comenzar a configurarlo.</para>

	<tip><para>Es de vital importancia que aprendas a instalar correctamente OpenBSD, a configurar el teclado, a descargar los paquetes desde FTP o HTML y que domines el particionado de los discos. Y esto no está detallado en este manual.</para></tip>

    </section>

    <section>
	<title>Puesta en marcha</title>
     
    <para>Pues nada, tras la instalación, reinicia el servidor y ya está. Ya tienes OpenBSD 5.1 corriendo en el servidor y preparado para ofrecer servicios desde internet. Felicidades, bébete una cerveza y disfruta del momento ;-).</para>
	</section>

	<section>
	<title>Configuración de la red</title>
	<para>Tras la instalación, si necesitamos cambiar la configuración de la red debemos saber que la configuración de las interfaces de red se encuentra en /etc/hostname.TU_TARJETA, donde TU_TARJETA es el nombre de la interfaz, en OpenBSD dependen del fabricante de la tarjeta de red, por lo tanto en cada ordenador es diferente.</para>

	<para>Para saber cómo se llaman nuestras tarjetas ejecutamos la orden ifconfig tal que así:</para>


    <programlisting language="bash">
bash-4.2# ifconfig -a
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 33196
        priority: 0
        groups: lo
        inet6 ::1 prefixlen 128
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x4
        inet 127.0.0.1 netmask 0xff000000
msk0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
        lladdr 00:13:a9:4f:83:8f
        priority: 0
        groups: egress
        media: Ethernet autoselect (100baseTX full-duplex,txpause)
        status: active
        inet6 fe80::213:a9ff:fe4f:838f%msk0 prefixlen 64 scopeid 0x1
        inet 192.168.1.36 netmask 0xffffff00 broadcast 192.168.1.255
ath0: flags=8822&lt;BROADCAST,NOTRAILERS,SIMPLEX,MULTICAST&gt; mtu 1500
        lladdr 00:19:7d:9c:6d:2a
        priority: 4
        groups: wlan
        media: IEEE802.11 autoselect
        status: no network
        ieee80211: nwid ESSID wpakey 0xda5cbd95 wpaprotos wpa1,wpa2 psk tkip
enc0: flags=0&lt;&gt;
        priority: 0
        groups: enc
        status: active
vlan0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
        lladdr 00:13:a9:4f:83:8f
        priority: 0
        vlan: 1 parent interface: msk0
        groups: vlan
        status: active
        inet6 fe80::213:a9ff:fe4f:838f%vlan0 prefixlen 64 scopeid 0x5
    </programlisting>


	<para>El nombre de tu máquina lo puedes configurar simplemente añadiéndolo en el fichero <emphasis>/etc/myname</emphasis>. No es necesario decir que te asegures de configurar bien tu dominio o subdominio y que apunte a la IP de tu casa, ya sea fija o dinámica (en mi caso es fija, por eso no comento nada de los servicios de IP's dinámicas):</para>

    <programlisting language="bash">
	$ cat /etc/myname                                                                                    
	nuvolet.strangled.net
	$ 
	</programlisting>

	<important><para>Busca en los manuales oficials de OpenBSD si tienes algún problema con la configuración de tu red, con tu pasarela, con la conexión Wifi, etc.</para></important>

</section>
</chapter>



<chapter xml:id="ajniciales">
  <title>Ajustes iniciales</title>
   <para>En los ajustes iniciales instalaremos BASH, emacs, wget y unzip con paquetes. 
Para ello, primero es fundamental explicar cómo se instalan, eliminan y actualizan paquetes en OpenBSD. Para ello, lee el siguiente apartado dónde sólo explciaré cómo gestionar paquetes pero no hablaremos de qué son los ports y cómo se instalan.</para>

    <section>
    <title>Instalación y gestión de paquetes</title>
    <para>Para instalar paquetes, lo primero que haremos sreá añadir el <quote>pkg_path</quote> en el .profile de nuestro superusuario:</para>

    <programlisting language="bash">
    export PKG_PATH=ftp://ftp.openbsd.org/pub/OpenBSD/5.0/packages/i386/
    </programlisting>

    <para>Ahora, ya podemos instalar o actualizar paquetes. Te mostraré las principales órdenes que ejecutaremos a la hora de administrar los paquetes en una máquina con OpenBSD:</para>

 <itemizedlist>
	<listitem>
	Instalación: <emphasis>pkg_add</emphasis>
	</listitem>
	<listitem>
	Instalación interactiva: <emphasis>pkg_add -i PAQUETE</emphasis>
	</listitem>
	<listitem>
	Instalación con verbose:<emphasis>pkg_add -v PAQUETE</emphasis>
	</listitem>
	<listitem>
	Actualización de un paquete: <emphasis>pkg_add -u PAQUETE</emphasis>
	</listitem>
</itemizedlist>
</section>

	<section>
	<title>Procedemos a instalar algunos paquetes iniciales</title>
	<para>OpenBSD lleva la shell 'Ksh' por defecto, pero algunas personas que venimos del sistema GNU/Linux estamos más familiarizados con Bash y ya conocemos muchos trucos y atajos de teclado usando esta shell.</para>
	<para>Entonces, vamos a instalar la shell Bash para comenzar a tener un entorno que se ajuste a nuestros gustos. Para ello ejecutaremos la siguiente orden:</para>
	
	<programlisting language="bash">
	pkg_add bash
	</programlisting>

	<para>Y a continuación, para tener la shell Bash predefinida por defecto ejecutaremos:</para>

	<programlisting language="bash">
	chsh -s bash
	</programlisting>

	<para>A continuación, instalamos el wget:</para>

	<programlisting language="bash">
	pkg_add wget-1.12p1.tgz
	</programlisting>

	<para>que también podríamos instalarlo apuntando al paquete directamente del repositorio:</para>
	
	<programlisting language="bash">
	pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.9/packages/i386/
	</programlisting>

	<para>Ahora instalaremos eMacs:</para>

	<programlisting language="bash">
	pkg_add emacs-23.4-no_x11
	</programlisting>

	<para>Y por último instalaremos el unzip: </para>

	<programlisting language="bash">
	pkg_add unzip-6.0
	</programlisting>

	<para>En realidad, la experiencia hace que te hagas práctico en esta serie de tareas de administración e instalar múltiples paquetes a la vez:</para>

		<programlisting language="bash">
		pkg_add bash unzip emacs-23.4-no_x11 unzip-6.0
		</programlisting>

	<para>Y un truco que yo hago es descargarme el listado de todos los paquetes de OpenBSD y luego puedo hacer búsquedas con grep dentro de ese fichero, al igual que hacia en Debian GNU/Linux usando <emphasis>apt-cache seach PROGRAMA</emphasis>. Para ello, me lo descargo con:</para>

		<programlisting language="bash">
		wget ftp://ftp.openbsd.org/pub/OpenBSD/4.9/packages/i386/index.txt                                         
		</programlisting>

		<para>Y ahora busco un programa escribiendo:</para>

		<para><programlisting language="bash">
		grep PAQUETE index.txt
		</programlisting></para>

		<para>Una vez hemos aprendido a instalar aplicaciones en OpenBSD, ya podemos instalar resto de aplicaciones que utilizaremos en nuestro servidor: mutt para leer el correo, nmap para escaneos de puertos, fetchmail para recoger el correo de otros servidores remotos, subversion para el control de versiones en nuestros 
scripts, el irssi para conectar a canales IRC y el genial screen:</para>

	<programlisting language="bash">
	pkg_add mutt-1.5.21p0v0 nmap fetchmail nano screen-4.0.3p2 
        subversion-1.7.2 irssi-0.8.15p2
	</programlisting>

</section>
</chapter>

<chapter xml:id="instalacionyconfiguracionservidorweb">
  <title>Instalación y configuración del servidor web</title>
   <para>OpenBSD tiene Apache preinstalado como parte del sistema, pero no lo tiene activado. Para activar Apache y que se inicie tras el arranque (el boot time) editaremos el fichero /etc/rc.conf/ y modificamos la línea donde dice: <emphasis>"http_flags=NO"</emphasis> y la dejamos así:</para>

	<programlisting language="bash">
	use -u to disable chroot, see httpd(8)
	httpd_flags=""          # for normal use: "" (or "-DSSL" after reading ssl(8))
	</programlisting>

<para>Si reinicias tu servidor, ya puedes poner en un navegador http://tu-dirección-ip y verás que ya tienes el servidor Apache funcionando. Lo que pasa es que aún no entiende PHP, así que vamos a proceder a instalar y configurar el PHP.</para>

<section>
	<title>Instalación y configuración de PHP</title>

	<para>Vamos a instalar PHP, le daremos la orden:</para>
	
	<programlisting language="bash">
	pkg_add php-5.3.10
	</programlisting>

	<para>En pocos minutos ya tendremos el PHP instalado. Seguidamente tenemos que hacer el enlace <emphasis>ln -sf</emphasis> para que funcione el PHP con Apache. </para>

	<para>Tras la instalación del PHP verás que el sistema OpenBSD te recomienda que pongas un enlace haciendo un enlace simbólico para tener habilitado y configurado el PHP5. Entonces, le haremos caso y ejecutaremos ese comando:</para>

	<programlisting language="bash">
	ln -s /var/www/conf/modules.sample/php-5.3.conf  /var/www/conf/modules/php.conf                  
	</programlisting>

	<para>Y luego nos dice que la configuración de PHP se ha instalado en /etc/php-5.3.ini, así que es aquí donde realizaréis los cambios en el PHP. Necesitamos asegurarnos de que la siguiente línea se encuentre descomentada en /var/www/conf/httpd.conf (primero le damos permisos de escritura con # chmod o+w /var/www/conf/httpd.conf):</para>

		<programlisting language="bash">
		AddType application/x-httpd-php .php
		</programlisting>

	<para>También que la línea de DirectoryIndex tenga lo siguiente:</para>

	<programlisting language="bash">
	DirectoryIndex index.html index.php
	</programlisting>

	<para>Ahora necesitamos instalar las librerías "Graphics Draw" en el PHP, que son unas librerías de código abierto desarrolladas en C para la creación dinámica de imágenes en aplicaciones. Entre otros muchos formatos, permiten manipular al vuelo imágenes PNG, JPEG y GIF. </para>

	<para>Para instalar estas librerías ejecutamos:</para>

	<programlisting language="bash">
	pkg_add php-gd-5.3.10
	</programlisting>

	<para>Y el sistema nos responde esto:</para>

	<programlisting language="bash">
	pkg_add php-gd-5.3.10
	php-gd-5.3.10:jpeg-8c: ok	
	php-gd-5.3.10:t1lib-5.1.2: ok
	php-gd-5.3.10:png-1.5.6p0: ok
	php-gd-5.3.10: ok
	--- +php-gd-5.3.10 -------------------
	You can enable this module by creating a symbolic
	link from /etc/php-5.3.sample/gd.ini to
	/etc/php-5.3/gd.ini.
	ln -fs /etc/php-5.3.sample/gd.ini /etc/php-5.3/gd.ini
	</programlisting>

	<para>Por lo que debemos crear ese enlace:</para>

	<programlisting language="bash">
	ln -fs /etc/php-5.3.sample/gd.ini /etc/php-5.3/gd.ini
	</programlisting>

		<para>También instalaremos la librería Curl de PHP, que aunque no es necesaria por una instalación mínima de Drupal, puede que algunos módulos la requieran. Así pues, instalaremos la librería de la misma versión de nuestro PHP (en mi caso la 5.3.10):</para>

		<programlisting language="bash">
		bash-4.2# pkg_add php-curl-5.3.10
		php-curl-5.3.10: ok
		--- +php-curl-5.3.10 -------------------
		You can enable this module by creating a symbolic
		link from /etc/php-5.3.sample/curl.ini to
		/etc/php-5.3/curl.ini.

		ln -fs /etc/php-5.3.sample/curl.ini \
		        /etc/php-5.3/curl.ini
		</programlisting>

		<para>Y ahora creamos el acceso directo que nos pide la libreríra:</para>

		<programlisting language="bash">
		bash-4.2# ln -fs /etc/php-5.3.sample/curl.ini /etc/php-5.3/curl.ini
		bash-4.2# 
		</programlisting>

	<para>Y ahora realizaremos lo mismo con la librería php-mcrypt:</para>

	<programlisting language="bash">
		bash-4.2# grep mcrypt index.txt 
		-rw-r--r--  1 276  125     176724 Feb  7 06:46:17 2012 libmcrypt-2.5.8p1.tgz
		-rw-r--r--  1 276  125      54203 Feb  7 23:45:35 2012 mcrypt-2.6.8p1.tgz
		-rw-r--r--  1 276  125      14273 Feb  7 17:52:09 2012 php-mcrypt-5.2.17p5.tgz
		-rw-r--r--  1 276  125      15776 Feb  7 09:10:11 2012 php-mcrypt-5.3.10.tgz

		bash-4.2# pkg_add php-mcrypt-5.3.10.tgz
		php-mcrypt-5.3.10:libmcrypt-2.5.8p1: ok
		php-mcrypt-5.3.10:libltdl-2.4.2: ok
		php-mcrypt-5.3.10: ok
		--- +php-mcrypt-5.3.10 -------------------
		You can enable this module by creating a symbolic
		link from /etc/php-5.3.sample/mcrypt.ini to
		/etc/php-5.3/mcrypt.ini.

		ln -fs /etc/php-5.3.sample/mcrypt.ini \
		        /etc/php-5.3/mcrypt.ini

		bash-4.2# ln -fs /etc/php-5.3.sample/mcrypt.ini /etc/php-5.3/mcrypt.ini
		bash-4.2# 
		</programlisting>

	<para>Al finalizar esta configuración vuelve a dejar los permisos como estaban antes, es decir, sin el permiso de escritura sobre este fichero:</para>

	<programlisting language="bash">
	chmod o-w /var/www/conf/httpd.conf
	</programlisting>

	<para>Aunque seguramente ya existe, debemos verificar que exista el directorio /var/www/tmp y que tenga permisos de escritura para todos los usuarios o que sea del grupo y del usuario "www" con todos los permisos. Este directorio /var/www/tmp puede ser usado por algunas aplicaciones que están en PHP (jaws por ejemplo).</para>

	<para>En caso de que no existiese, haremos lo siguiente:</para>

	<programlisting language="bash">
	mkdir /var/www/tmp
	chown www /var/www/tmp
	chmod u+rwx /var/www/tmp
	</programlisting>

	<para>Ahora vamos a instalar la librería GD de php5:</para>

	<programlisting language="bash">
	pkg_add -i -v ftp://ftp.openbsd.org/pub/OpenBSD/4.9/packages/i386/php5-gd-5.2.17-no_x11.tgz
	</programlisting>
</section>

<section>
	<title>Arrancamos Apache y PHP: la hora de la verdad</title>
	<para>En el capítulo anterior hemos habilitado Apache, que viene preinstalado en OpenBSD, y posteriormente hemos instalado y activado el PHP para poder tener páginas php dinámicas en nuestro servidor.</para>

	<para>Ahora vamos a reiniciar nuestro servidor de apache con la siguiente orden:</para>

	<programlisting language="bash">
	apachectl stop
	apachectl start
	</programlisting>

	<para>Podemos probar que nuestro servidor de apache ya esté funcionando, creamos un archivo test.php en el directorio de documentos de http /var/www/htdocs, y metemos en este archivo lo siguiente:</para>

		<programlisting language="php">
		&lt;?php
		phpinfo();
		?&gt;
		</programlisting>

<figure>
<title>Ahora ya tenemos Apache y PHP configurado al 100%.</title>
<graphic fileref="imagenes/php-info.jpg"></graphic>
</figure> 

</section>

<section>
	<title>Última configuración: los Virtual Hosts</title>
	<para>Dejo el código de ejemplo para dos dominios imaginarios: "rajoy.es" y "zapatero.es". Puedes copiarlo literalmente y copiarlo en tu <emphasis>httpd.conf</emphasis>:</para>

	<programlisting language="bash">
	&lt;VirtualHost 192.168.1.5:80&gt;
	    ServerAdmin micorreo@correo.es
	    DocumentRoot /var/www/htdocs/rajoy.es
	    ServerName rajoy.est
	    ErrorLog logs/rajoy.es-error_log
	    CustomLog logs/rajoy.es-access_log common
	&lt;/VirtualHost&gt;
	
	&lt;VirtualHost 192.168.1.5:80&gt;
	    ServerAdmin micorreo@correo.es
	    DocumentRoot /var/www/htdocs/zapatero.es
	    ServerName zapatero.es
	    ErrorLog logs/zapatero.es-error_log
	    CustomLog logs/zapatero.es-access_log common
	&lt;/VirtualHost&gt;
	</programlisting>
</section>
</chapter>


<chapter xml:id="instalacionmysql">
	<title>Instalación y configuración de MySQL</title>
	<para>En este capítulo aprenderemos cómo descargar MySQL y cómo configurarlo para que tengamos el servidor arrancado tras el arranque del sistema.</para>

<section> 
  <title>Instalación de MySQL</title>
	<para>En OpenBSD 5.1, la versión de MySQL es MySQL 5.1.60. Vamos a proceder a instalar el servidor de la siguiente manera:</para>

	<programlisting language="bash">
	pkg_add mysql-server
	</programlisting>

	<para>Y a continuación tenemos que instalar un plugin para acabar de tener configurado el MySQL para que pueda conectar con nuestras páginas webs, y se trata del conector PHP-MySQL. Para ello, lo instalaremos de la siguiente manera:</para>

	<programlisting language="bash">
	pkg_add php-mysql-5.3.10
	</programlisting>

	<para>RECUERDA: cuando instales esto, recuerda que después debes hacer los enlaces <quote>ln -s</quote> para que funcionen correctamente. Ahora, el plugin PHP-MySQL nos dice que debemos crear el enlace simbólico:</para>
 
	<para>Ahora el plugin PHP-MySQL nos dice que debemos de crear el enlace simbólico:</para>

	<programlisting language="bash">
	ln -fs /etc/php-5.3.sample/mysql.ini /etc/php-5.3/mysql.ini
	</programlisting>

	<para>Ahora lanzamos el demonio de MySQL y procederemos a la creación de la contraseña del usuario root:</para>

	<programlisting language="bash">
	/usr/local/bin/mysql_install_db
	/usr/local/bin/mysqld_safe &amp;
	/usr/local/bin/mysqladmin -u root password 'TU-NUEVA-CONTRASEÑA'
	</programlisting>

	<para>Perfecto. Si has llegado hasta aquí sin problemas ya tienes el MySQL perfectamente funcionando y con la contraseña del superadministrador cambiada.</para>

	<para>A continuación vamos a acceder a MySQL y crearemos la primera base de datos de pruebas lladama "drupal_db" para instalar un Drupal o un Wordpress para testear que tenemos Apache con PHP y el MySQL perfectamente preparados para albergar proyectos basados en gestores de contenidos:</para>

	<programlisting language="bash">
	mysql -u root -p
	mysql> create drupal1_db;
	mysql> grant all privileges
	    -> on drupal1_db.*
	    -> to 'usuari'@'localhost'
	    -> identified by '1qazxsw2';
	 Query OK, 0 rows affected (0.00 sec)	
	 mysql>
	</programlisting>

	<para>Ahora, para que el demonio de MySQL se inicie en el arranque del sistema OpenBSD, añadiremos la siguiente línea en el fichero /etc/rc.conf.local:</para>

	<programlisting language="bash">
	pkg_scripts="mysqld"
	</programlisting>

	<para>I ara com Apache corre com chrooted a /var/www necesitem fer uns hard links per a que puga treballar amb els sockets de MySQL. El fichero /etc/rc.local quedará así:</para>

	<programlisting language="php">
	$OpenBSD: rc.local,v 1.44 2011/04/22 06:08:14 ajacoutot Exp $	
	Site-specific startup actions, daemons, and other things which
	can be done AFTER your system goes into securemode.  For actions
	which should be done BEFORE your system has gone into securemode
	please see /etc/rc.securelevel.

	mkdir -p /var/www/var/run/mysql
	sleep 5
	ln -f /var/run/mysql/mysql.sock /var/www/var/run/mysql/mysql.sock
	</programlisting>
	
	<para>Para acabar, ejecutaremos el script mysql_secure_installation el cual nos va a ir preguntando una serie de pasos para la puesta en marcha en producción de MySQL:</para>
	
	<programlisting language="bash">
	/usr/local/bin/mysql_secure_installation    
	</programlisting>

	<para>Ahora te cuento una cosa a modo informativo: desde la versión 4.9 de OpenBSD, el iniciador de MySQL ya viene /etc/rc.d, y ahí estan los scripts de inicio, osea, que ya podemos usar "/etc/rc.d/mysqld start" o "/etc/rc.d/mysqld stop" cuando queramos para labores de mantenimiento, configuraciones en el servidor MySQL o de fallos en el rendimiento.</para>

	<para>Y eso eso todo, ya lo tenemos. Ya tenemos el set OAM (OpenBSD + Apache + MySQL). Así que cuando quieras ya puedes reiniciar Apache y ya podemos comenzar a instalar un Wordpress, un Drupal o lo que queramos para probar que el entorno OAM está funcionando correctamente.</para>

</section>
</chapter>




<chapter xml:id="saludosesion">
	<title>Saludo en una sesión remota</title>
	<para>Siempre me gustó esos mensajios que te muestran los servidores Unix tras el inicio en una sesión FTP o SSH. Aquí te cuento cómo configurarlo en un OpenBSD.</para>

<section> 

	<title>Configuración del motd</title>
	<para>Añadiremos lo siguiente en el fichero <emphasis>/etc/motd</emphasis>:</para>


	<programlisting language="bash">

 _ __  _   ___   _____ | | ___| |_ 
| '_ \| | | \ \ / / _ \| |/ _ \ __|
| | | | |_| |\ V / (_) | |  __/ |_ 
|_| |_|\__,_| \_/ \___/|_|\___|\__|
   
OpenBSD 5.1 (GENERIC.MP) #188: Sun Feb 12 09:55:11 MST 2012
Bienvenido al sistema nuvolet.strangled.net
	</programlisting>

<figure>
<title>El saludo que nos da el servidor al acceder.</title>
<graphic fileref="imagenes/xterm-nuvolet.jpg"></graphic>
</figure> 

<para>Que por cierto, obtendremos este "nuvolet" tan grande con la aplicación figlet:</para>

	<programlisting language="bash">
	figlet nuvolet
	</programlisting>


</section>
</chapter>




<chapter xml:id="correoelectronico">
	<title>El correo electrónico en nuestro servidor</title>
	<para>En este capítulo quiero mostrar como enviar correos desde nuestro servidor, cómo desargar el correo de otras cuentas utilizando fetchamil, ya sea con POP3 o IMAP, y cómo leer correos desde la consola con Mutt.</para>

<section>
<title>Habilitar sendmail</title>
<para>OpenBSD incluye una versión auditada de sendmail, para usarla con una configuración por defecto que permite enviar y recibir correos a otras máquinas.</para>

<para>Con esta configuración sendmail funcionará como MTA y esperará conexiones SMTP en el puerto 25 y en el puerto 587 (el segundo se espera que sea empleado por usuarios locales y que esté bloqueado al exterior, mientras que el primero por usuarios que deseen reenviar correo desde otros computadores).</para>

<para>A continuación se presenta una prueba a este servicio:</para>

    <programlisting language="bash">
$ telnet localhost 25
Trying ::1...
Connected to localhost.
Escape character is '^]'.
220 amor.miescuela.edu.co ESMTP Sendmail 8.13.8/8.13.3; Mon, 16 Oct 2006
HELO localhost
250 amor.miescuela.edu.co Hello pablo@localhost [IPv6:::1], pleased to meet you
MAIL FROM: &lt;pablo@localhost&gt;
250 2.1.0 &lt;pablo@localhost&gt;... Sender ok
RCPT TO: &lt;pablo@localhost&gt;
250 2.1.5 &lt;pablo@localhost&gt;... Recipient ok
DATA
354 Enter mail, end with "." on a line by itself
1 2 3
probando
.
250 2.0.0 k9GHgf1q019958 Message accepted for delivery
quit
221 2.0.0 amor.miescuela.edu.co closing connection
Connection closed by foreign host.
</programlisting>

<para>Los logs de Sendmail los tenemos en <emphasis>/var/log/mailman</emphasis>, tanto los de los envíos como los de recepción del correo electrónico. Hecha un vistazo aquí si necesitas analizar trazos y fallos que detectes en lo relativo a los correos electrónicos.
</para>
</section>



<section>
<title>Fetchmail y mutt, una gran pareja</title>
<para>A continuación vamos a aprender cómo recibir correos con fetchmail y cómo leerlos y enviar nuevos correos desde Mutt.

<para><emphasis>Fetchmail</emphasis> nos permitirá tomar los correos usando POP3 (descargándolos directamente de un servidor de correo) o IMAP (los descarga pero no los elimina del servidor, así siempre tendrás la misma información tanto en el servidor como en tu Mutt).</para>

<para>Configurar fetchmail para que descargue los correos desde POP3 editaremos el fichero .fetchmailrc dentro de nuestro /home. Imagina que quiero descargar los correos de 2 cuentas que tengo, una en yahoo llamada "joanc@yahoo.com" y otra en gmail llamada "joanc@gmail.com". Bien, pues para ello editaremos .fetchmailrc y pondremos algo así:</para>

    <programlisting language="bash">
set daemon 60
##########################################
# YAHOO mediante POP3
##########################################
poll pop.mail.yahoo.com
protocol pop3
username "joanc"
password "MI_CONTRASEÑA" is "joan" here

##########################################
# GMAIL mediante IMAP
##########################################
poll imap.gmail.com protocol IMAP
user "joanc@gmail.com" is joan here
password 'MI_CONTRASEÑA'
#fetchlimit 6
keep
ssl
    </programlisting>

<para>Tras editar el fichero .fetchmailrc, cerciórate que sólo tú puedas leer dicho fichero y nadie más, para ello haz:</para>

    <programlisting language="bash">
chmod g=,o= .fetchmailrc
</programlisting>

<para>Recuerda que otros usuarios pueden intentar escuadriñar tus datos y siempre debemos controlar muy bien los privilegios de lectura y escritura para vigilar que nadie vea cosas que no queremos.</para>

<para>Fetchmail se puede ejecutar en modo dæmon mediante el parámetro -d seguido seguido por un intervalo de tiempo (expresado en segundos) que indica cada cuánto tiempo debe fetchmail interrogar a los distintos servidores listados en .fetchmailrc.</para>

<para>El siguiente ejemplo hace que fetchmail interroge cada 300 segundos (5 minutos):</para>

    <programlisting language="bash">
	fetchmail -d 300
	</programlisting>

<para>Añadiremos este comentado en /etc/rc.local para que fetchmail comience tras cada reinicio del sistema OpenBSD, ¿fácil, no?</para>
</para>
</section>
</chapter>




<chapter xml:id="transferenciaftp">
	<title>Transferencia de ficheros</title>
	<para>En este capítulo aprenderemos cómo crear cuentas de FTP y configurar un servidor FTP mínimamente decente. Como sabrás, al tener habilitado el servicio SSH también tenemos transferencias SCP y de hecho, al ser cifrada, es mucho más segura que el FTP, así que tú eliges si quieres usar transferencias de ficheros FTP o SCP. Yo en este capítulo del libro explicaré como tener el servidor FTP corriendo, pero no sería necesario si eliges SCP.</para>

<section>
<title>Arrancar el servicio FTP</title>
<para>OpenBSD incluye SSH y FTP. Para activarlos o desactivarlos hay que editar el /etc/rc.conf.
El FTP se activa editando el fichero /etc/rc.conf y donde pone:</para>

    <programlisting language="bash">
# Set to NO if ftpd is running out of inetd
ftpd_flags="NO"           # for non-inetd use: ""
	</programlisting>

<para>Lo dejamos así:</para>

    <programlisting language="bash">
# Set to NO if ftpd is running out of inetd
ftpd_flags=""           # for non-inetd use: ""
	</programlisting>

<para>Por defecto, durante la instalación nos pregunta si queremos activar el servicio de SSH y le dijimos que sí. En caso de que le dijésemos que no y queremos activarlo ahora, lo haremos igual que hemos hecho con el FTP.
</para>
</section>

<section>
<title>Configuración de las cuentas FTP</title>
<para>
Si estamos en nuestra red local, podemos transferir datos usando el protocolo FTP ya sea con un cliente de FTP ya estés en GNU/Linux, Mac OS X o Windows.</para>
<para>Sin embargo, te recomendamos que utilizes SCP, que es el protocolo de transferencia del SSH, ya que éste va cifrado, mientras que en un FTP las claves van en texto plano y serían muy fáciles de capturar si alguien está esnifando paquetes en la red.</para>

<para>Sea como sea, ya sabes ahora como activar y desactivar el FTP y el SCP (que es el SSH) en OpenBSD 5.1</para>

<para>Ahora, si el usuario "fulanito" tiene la página web www.fulanito.com albergada en la ruta /var/www/htdocs/fulanito.com, podemos hacer un enlace en su home para que siempre pueda subir los ficheros a su web desde su home:</para>

    <programlisting language="bash">
	cd /home/fulanito
	$ ln -s /var/www/htdocs/servidoret.strangled.net/ servidoret.strangled.net            
    </programlisting>

<para>Esto lo ejecutaremos con todos los usuarios que tengan una web.</para>


</section>
</chapter>








<chapter xml:id="administracionmaquinas">
	<title>Administración de la(s) máquina(s)</title>
	<para>En este capítulo aprenderemos una serie de utilidades para saber cómo están los procesos, para saber qué está haciendo un cierto usuario del sistema y otras utilidades que nos ayudarán a mantener nuestra máquina estable y que no se nos desborde por falta de previsión.</para>

<section>
<title>Ver los procesos de los usuarios.</title>
<para>Realizamos este chequeo con "ps" y con el atributo "-U" (de User). Por ejemplo, en este ejemplo vamos a ver los procesos del usuario "joan".</para>

    <programlisting language="bash">
$ ps -U joan
  PID TT  STAT       TIME COMMAND
4227 ??  Ss      0:09.61 fetchmail -v
25568 ??  S       0:00.04 sshd: joan@ttyp0 (sshd)
15297 p0  Ss      0:00.01 -ksh (ksh)
4958 p0  R+/1    0:00.00 ps -U joan
$
</programlisting>
</section>


<section>
<title>El comando finger</title>
<para>El comando finger muestra información del usuario. Si somos administradores, entonces como root podemos conocer el nombre de login, el directorio, el nombre completo y otros datos de los usuarios. Supongamos que tenemos un usuario llamado <quote>luis</quote> y ejecutamos <emphasis>finger</emphasis>, obendremos:</para>

    <programlisting language="bash">
	$ finger luis                	                                                                         
	Login: luis                             Name: Luis de Pruebas García
	Directory: /home/luis                   Shell: /bin/ksh
	On since Sun Oct 28 14:34 (CET) on ttyp0 from 192.168.1.40
	New mail received Sun Oct 28 18:46 2012 (CET)
	Unread since Sat Oct 27 11:52 2012 (CEST)
	No Plan.
	$ 
	</programlisting>

<para>Como ves, esto nos muestra el login con el que accede el usuario, la shell por defecto, el nombre de la persona, el tiempo que lleva conectado y si tiene o no mensajes de correo.</para>
</section>



<section>
<title>Detección de intrusos con el comando who</title>
<para>El comando who muestra quien está conectado al sistema. Su sintaxis es la siguiente:</para>

    <programlisting language="bash">
    who [-imqsuwHT] [--count] [--idle] [--heading] [--help] [--message] 
	      [--mesg] [--version] [--writable] [file] [am i]
	</programlisting>

    <para>El comando <emphasis>who</emphasis> por defecto muestra el nombre de la cuenta, el terminal en donde está conectado el usuario, el tiempo que dura su ingreso en el sistema y el nombre del ordenador remoto o terminal X si estuviese en las X</para>
</section>



<section>
<title>Comprobar los logs</title>
<para>Para buscar algún error o algún evento que se haya producido en nuestra máquina revisaremos los logs. Podemos monitorizar así las visitas a una determinada página web o a otra, los accesos al sistema por parte de los usuarios de FTP, los correos, etc.</para>

<para>Por defecto, en OpenBSD los logs se almacenan en el directorio /var/log/. A continuación, voy a listar las 15 últimas líneas del log de los correos para ver ha surgido algún problema:</para>

	<programlisting language="bash">
	$ tail -n 15 /var/log/maillog
	</programlisting>
</section>


<section>
<title>Revisar en los logs si alguien ha intentado acceer al sistema mediante SSH</title>

	<programlisting language="bash">
	$ grep "Invalid user" authlog | grep "Oct 25" | wc -l
	5
	</programlisting>

<para>Parece ser que 5 (y hoy yo no he entrado más que una vez). En concreto, son estas entradas:</para>

	<programlisting language="bash">
	Oct 25 00:35:51  sshd[19510]: Invalid user test from 119.147.244.96
	Oct 25 00:41:09  sshd[8207]: Invalid user direccion from 119.147.244.96
	Oct 25 10:27:35  sshd[23863]: Invalid user oracle from 61.135.88.137
	Oct 25 10:31:19  sshd[22022]: Invalid user oracle from 61.135.88.137
	</programlisting>

<para>Hay bots o personas malintencionadas que han estado urgando en mi servidor, como puedes ver, pues yo no he creado la cuenta a ningún 'test', 'direccion' o 'oracle'... y alguien intenta acceder a mi máquina usando dichos usuarios. Así que ya sabes, ten mucho cuidado y valora la seguridad.</para>
</section>




<section>
<title>Ver los logs en tiempo real</title>
<para>Puedes mirar los logs de la máquina en tiempo real, así cuando un usuario enviará un e-mail o cuando alguna persona visite alguna de las páginas web albergadas o cuando existan errores graves, recibirás por consola la línea de lo que ocurre en tiempo real. Esto se hace con tail -f FICHERO_DEL_LOG, así que puedes elegir de entre todos los logs existentes en el sistema que por defecto en OpenBSD están en /var/log.</para>

<para>En el siguiente ejemplo vamos a monitorizar en tiempo real los correos entrantes y salientes de todos los usuarios del sistema:</para>

	<programlisting language="bash">
	$ tail -f /var/log/maillog   
	</programlisting>
</section>
</chapter>





<chapter xml:id="monitorizar">
	<title>Monitorización de nuestro servidor</title>
	<para>En este capítulo quiero ir centralizando una serie de ideas y aplicaciones que nos ayudarán a monitorizar todo aquello que sucede en nuestro servidor doméstico OpenBSD para tenerlo todo bajo control.</para>


<section>
<title>Controla la entrada y salida de tu tarjeta de red</title>
<para>Para controlar los bytes de los paquetes de entrada y de salida en nuestra máquina y cerciorarnos de que todo sea correcto, utilizaremos <emphasis>netstat</emphasis>:</para>

	<programlisting language="bash">
	netstat -b -w 1
	</programlisting>

	<para>He usado <emphasis>-b</emphasis>, que nos muestra las estadísticas de los bytes de los paquetes de entrada y salida, y también he puesto <emphasis>-w</emphasis> que muestra las estadísticas de la interfaz de red en intérvalos de segundos (en el ejemplo, de 2 segundos).</para>
</section>

<section>
<title>Monitorización y estadísticas con vnstat</title>
<para>Para mi <emphasis>vnstat</emphasis> es una aplicación por consola genial. La web del proyecto es <ulink>http://humdi.net/vnstat/</ulink> y allí te explican muchos ejemplos para sacar estadísticas de red diarias, semanales, mensuales, etc.</para>

<para>Como ya habrás aprendido, lo instalaremos con:</para>

	<programlisting language="bash">
	bash-4.2# pkg_add vnstat
	vnstat-1.10p6:gd-2.0.35p0: ok
	useradd: Warning: home directory `/var/db/vnstat' doesn't exist
	vnstat-1.10p6: ok
	The following new rcscripts were installed: /etc/rc.d/vnstatd
	See rc.d(8) for details.
	Look in /usr/local/share/doc/pkg-readmes for extra documentation.
	</programlisting>

	<para>Si la primera vez lo ejecutamos, nos dirá que aún no funciona porque todavía no ha recogido los suficientes datos en la base de datos.</para>

	<programlisting language="bash">
	bash-4.2# vnstat
	msk0: Not enough data available yet.
	bash-4.2#
	</programlisting>

	<para>Pero tras un tiempo, ya podrás comenzar a explotar los datos de tu servidor, y en la ayuda te explican los atributos al comando de manera muy intuitiva:</para>

		<programlisting language="bash">
	vnStat 1.10 by Teemu Toivola &lt;tst at iki dot fi&gt;

         -q,  --query          query database
         -h,  --hours          show hours
         -d,  --days           show days
         -m,  --months         show months
         -w,  --weeks          show weeks
         -t,  --top10          show top10
         -s,  --short          use short output
         -u,  --update         update database
         -i,  --iface          select interface (default: msk0)
         -?,  --help           short help
         -v,  --version        show version
         -tr, --traffic        calculate traffic
         -ru, --rateunit       swap configured rate unit
         -l,  --live           show transfer rate in real time
	</programlisting>

</section>
</chapter>






<chapter xml:id="sistemarespaldo">
	<title>Garantizando el servicio con copias y con un sistema de respaldo</title>
	<para>En este capítulo aprenderemos a mantener un sistema de copias de seguridad basado en Unix y a la importancia de mantener un sistema de respaldo si pretendemos dar algún servicio serio.</para>

<section>
<title>Haciendo copias de seguridad</title>
<para>Tú eres el gran hacker onmipresente, protector del cielo y de la tierra, creador del Universo UNIX eterno que da vida a los usuarios y el que tiene el poder para salvaguardar la paz del mundo por los siglos de los siglos. Ramén.</para>

<para>Bueno, dejando este texto panfletario pastafari, ahora pongámonos serios: No te fíes jamás de las manazas de los usuarios, así que adelántate a los posibles problemas que pueden venir, que sin duda vendrán. Encárgate de mantener un sistema seguro, estable y que tenga copias de seguridad de todo:</para>

      <itemizedlist>
	<listitem>
	De las bases de datos.
	</listitem>
	<listitem>
	De los directorios de los usuarios (/home).
	</listitem>
	<listitem>
	De todas las webs y configuraciones (/var/www).
	</listitem>
	<listitem>
	Haz un listado de aplicaciones instaladas (pkg_info).
	</listitem>
	<listitem>
	De las configuraciones de arranque y de los distintos programas (apúntatelo todo bien y luego diseña copias).
	</listitem>
	</itemizedlist>

<para>La mejor planificación serían copias diarias y copias semanales que almacenaremos siempre en 2 sitios diferentes, por ejemplo en otro ordenador que esté en red con SCP o FTP y en un disco duro USB externo, pero esto ya depende de los dispositivos de que dispongas.</para>

<para>Sea como sea, planifica bien tus copias de seguridad. Sólo es necesario planificarlas una vez, ya que después lo tendremos automatizado y lo llamará el CRON la máquina, pero es importante asentar bien el método a utilizar ya que de las copias de seguridad depende que la información del servidor no se pierda jamás.</para>

<para>Para ficheros podemos usar tar.gz y hacer paquetes comprimidos:</para>

	<programlisting language="bash">
	tar -cvfz home-de-los-usuarios.tar.gz /home
	</programlisting>

<para>Para exportar todas las bases de datos MySQL del sistema e incluirlas en el backup, podemos hacer un:</para>

	<programlisting language="bash">
	mysqldump -uUSUARIO -pCONTRASEÑA --all-databases &gt; mi_copia.bk
	</programlisting>

	<para>Y lo recuperaremos con:</para>

	<programlisting language="bash">
	mysql -uUSUARIO -pCONTRASEÑA &lt; mi_copia.bk
	</programlisting>


</section>

<section>
<title>Creando un sistema de respaldo</title>
<para>Algún día, o semana o mes, te querrás ir de casa a tomarte unas pequeñas vacaciones y a beber cerveza sin control. Querrás apagar la luz o el gas de casa cerrados para prevenir algún incidente, ¿verdad? y ¿qué harás con tu servidor?, porque seguramente no quieres cerrar el servicio, ¿verdad?</para>

<para>Te recomiendo planificar un buen sistema de respaldo para evitar problemas e incidentes indeseados que hagan que tus servicios se vayan al garete. Para ello, puedes:</para>

      <itemizedlist>
	<listitem>
	Conseguir otro ordenador e instalar la misma versión del sistema operativo
	</listitem>
	<listitem>
	Hablas con algún/alguna amigo/a que tenga conexión ADSL en casa y que no le importe dar servicio de vez en cuando.
	</listitem>
	<listitem>
	Conseguimos un dominio o subdominio para llamar a esta segunda máquina de respaldo.
	</listitem>
	<listitem>
	Conseguir otro ordenador e instalar la misma versión del sistema operativo
	</listitem>
	<listitem>
	Creamos un sistema de sincronización con rsync y SSH de la máquina 1 a la máquina 2 y que se sincronicen un día a la semana a una hora exacta. Para ello tu amigo tiene que encender la máquina 2 dicho día de la semana.
	</listitem>
	</itemizedlist>

<para>Así pues, cuando tú te vayas a hacer surf a Hawaii, puedes apagar todo en tu casa y cambias los registros DNS de tu dominio para que apunten a la IP de tu amigo. generado allí.</para>

<para>Este sistema también servirá para hacer un mantenimiento bastante grande a tu máquina, formateo o reinstalación de todo el sistema.</para>
</section>
</chapter>
</book>
